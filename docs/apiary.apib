FORMAT: 1A
HOST: http://localhost:5000

# Critique

Critique is a simple API allowing interactions to the platfrom.

# Group Link Relations

This document uses IANA standard link relations (http://www.iana.org/assignments/link-relations/link-relations.xhtml). In addition the following link relations have been defined:

## all-users [/critique/link-relations/all-users]

Returns the list of users in the platform via `GET`.

### GET

Return the link relation description in HTML format.

+ Response 301 (text/html; charset=utf-8)

## all-posts [/critique/link-relations/all-posts]

Returns the list of posts in the platform via `GET`.

### GET

Return the link relation description in HTML format.

+ Response 301 (text/html; charset=utf-8)

## add-user [/critique/link-relations/add-user]

Creates a new user via `POST`.

### GET

Return the link relation description in HTML format.

+ Response 301 (text/html; charset=utf-8)

## add-post [/critique/link-relations/add-post]

Creates a new post via `POST`.

### GET

Return the link relation description in HTML format.

+ Response 301 (text/html; charset=utf-8)

## add-reply [/critique/link-relations/add-reply]

Creates a new reply to a post via `POST`.

### GET

Return the link relation description in HTML format.

+ Response 301 (text/html; charset=utf-8)

## add-rating [/critique/link-relations/add-rating]

Creates a new rating via `POST`.

### GET

Return the link relation description in HTML format.

+ Response 301 (text/html; charset=utf-8)

## user-inbox [/critique/link-relations/user-inbox]

Returns the posts sent to the user which are currently not public via `GET`.

### GET

Return the link relation description in HTML format.

+ Response 301 (text/html; charset=utf-8)

## user-river [/critique/link-relations/user-river]

Returns the posts sent to the user which are currently public via `GET`.

### GET

Return the link relation description in HTML format.

+ Response 301 (text/html; charset=utf-8)

## user-ratings [/critique/link-relations/ratings]

Returns the ratings sent to the user via `GET`.

### GET

Return the link relation description in HTML format.

+ Response 301 (text/html; charset=utf-8)

## delete [/critique/link-relations/delete]

Deletes the current context. Use via `DELETE`.

### GET

Return the link relation description in HTML format.

+ Response 301 (text/html; charset=utf-8)

## sender [/critique/link-relations/sender]

Returns the sender of the resource such as rating or post via `GET`.

### GET

Return the link relation description in HTML format.

+ Response 301 (text/html; charset=utf-8)

## receiver [/critique/link-relations/receiver]

Returns the receiver of the resource such as rating or post via `GET`.

### GET

Return the link relation description in HTML format.

+ Response 301 (text/html; charset=utf-8)

# Group Profiles

## Error Profile [/critique/profiles/error_profile]

Profile definition for all errors messages in the system.

### Semantic Descriptors

#### Data Type Error

 * `resource_url` (string): URL of the resource generating the error.

### GET

Return the User Profile in HTML format.

+ Response 301 (text/html; charset=utf-8)

## User Profile [/critique/profiles/user_profile]

Profile definition for all user resources.

### Dependencies

This profile inherits:

 * Some semantic descriptors from [Person](http://schema.org/Person)
 * Some link relations from IANA Web linking [RFC5988](https://www.iana.org//assignmentscritique/link-/relationscritique/link-relations.xhtml)

### Link relations

 * [`add-user`](#add-user)
 * [`delete`](#delete)
 * [`user-inbox`](#user-inbox)
 * [`user-river`](#user-river)
 * [`user-ratings`](#user-ratings)

Inherited from IANA RFC5988:

 * [`collection`](http://tools.ietf.org/html/rfc6573): Only accessible through `GET`.
 * [`edit`](https://tools.ietf.org/html/rfc5023#section-11.1): This link allows editing the user via `PUT`.
 * [`profile`](https://tools.ietf.org/html/rfc6906): The link contains the location of the resource profile.

### Semantic Descriptors

#### Data Type User

 * `nickname` (string): Nickname of the user. Mandatory in representations in which a new user is generated.
 * `avatar` (string): Avatar of the user. Optional in representations in which a new user is generated.
 * `bio` (string): Signiture of the user. Optional in representations in which a new user is generated.

Inherited from [Person](http://schema.org/Person):

 * [`givenName`](http://schema.org/givenName) (string): Mandatory in representations in which a new user is generated.
 * [`familyName`](http://schema.org/familyName) (string): Optional in representations in which a new user is generated.
 * [`email`](http://schema.org/email) (string): Mandatory in representations in which a new user is generated.
 * [`birthDate`](http://schema.org/birthDate) (string): Optional in representations in which a new user is generated.
 * [`telephone`](http://schema.org/telephone) (string): Optional in representations in which a new user is generated.
 * [`gender`](http://schema.org/gender) (string): Optional in representations in which a new user is generated.

### GET

Return the User Profile in HTML format.

+ Response 301 (text/html; charset=utf-8)

## Post Profile [/critique/profiles/post_profile]

Profile definition for all post resources.

### Dependencies

This profile inherits:

 * Some semantic descriptors from [Rating](http://schema.org/Rating)
 * Some link relations from IANA Web linking [RFC5988](https://www.iana.org//assignmentscritique/link-/relationscritique/link-relations.xhtml)

### Link relations

 * [`add-post`](#add-post)
 * [`add-reply`](#add-reply)
 * [`delete`](#delete)

Inherited from IANA RFC5988:

 * [`collection`](http://tools.ietf.org/html/rfc6573): Only accessible through `GET`.
 * [`edit`](https://tools.ietf.org/html/rfc5023#section-11.1): This link allows editing the post via `PUT`.
 * [`profile`](https://tools.ietf.org/html/rfc6906): The link contains the location of the resource profile.

### Semantic Descriptors

#### Data Type post

 * `sender` (string): Nickname of the sender. Mandatory in representations in which a new post is generated.
 * `receiver` (string): Nickname of the receiver. Optional in representations in which a new post is generated.
 * `timestamp` (number): Time of the post created in UNIX format.
 * `postId` (string): Id of the post in 'p-(\d+)' format.
 * `replyTo` (string): Id of the parent post. If `null` is returned it means post is the top most.
 * `body` (string): Text of the post. Mandatory in creation of a new post.
 * `anonymous` (boolean): Is the post sent anonymously or not. Mandatory in creation of a new post.
 * `public` (boolean): Is the post sent public or not.

Inherited from [Rating](http://schema.org/Rating):

 * [`bestRating`](http://schema.org/bestRating) (number): For informing the client.
 * [`ratingValue`](http://schema.org/ratingValue) (number): Optional in creation of a new post.

### GET

Return the post profile in HTML format.

+ Response 301 (text/html; charset=utf-8)

## Rating Profile [/critique/profiles/rating-profile]

Profile definition for all rating resources.

### Dependencies

This profile inherits:

 * Some semantic descriptors from [Rating](http://schema.org/Rating)
 * Some link relations from IANA Web linking [RFC5988](https://www.iana.org//assignmentscritique/link-/relationscritique/link-relations.xhtml)

### Link relations

 * [`add-rating`](#add-rating)
 * [`delete`](#delete)

Inherited from IANA RFC5988:

 * [`collection`](http://tools.ietf.org/html/rfc6573): Only accessible through `GET`.
 * [`edit`](https://tools.ietf.org/html/rfc5023#section-11.1): This link allows editing the user via `PUT`.
 * [`profile`](https://tools.ietf.org/html/rfc6906): The link contains the location of the resource profile.

### Semantic Descriptors

#### Data Type Rating

 * `ratingId` (string): Rating id of the rating in `rtg-(\d+)` format. Example `rtg-1`.
 * `sender` (string): Nickname of the sender. Example, `Scott`.
 * `receiver` (string): Nickname of the receiver. Example, `Kim`.

Inherited from [Rating](http://schema.org/Rating):

 * [`bestRating`](http://schema.org/bestRating) (number): For informing the client.
 * [`ratingValue`](http://schema.org/ratingValue) (number): Mandatory in creation of a new rating.

### GET

Return the Rating Profile in HTML format.

+ Response 301 (text/html; charset=utf-8)



# Group Users

All these resources use the [User Profile](#profiles-user-profile).

In addition all error messages follow the [Error Profile](#profiles-error-profile).

## Users List [/critique/api/users/]

This resource returns list of users, extracting all userâ€™s summary in the database. It contains the data for every user profile including the id, firstname, lastname, bio about the user and other information.Should contain nickname, avatar and bio.

### List Users [GET]

Extracts all users summary in the database.

+ Relation: self

+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    List successful retrieved.

    + Body

            {
                "items": [
                    {
                        "nickname": "Scott",
                        "givenName": "Scott",
                        "familyName": "Pilgrim",
                        "bio": "Best bass in town. Ramona <3",
                        "avatar": "photo1.jpg",
                        "@controls": {
                            "self": {
                                "href": "/critique/api/users/Scott/"
                            },
                            "profile": {
                                "href": "/critique/profiles/user-profile/"
                            }
                        }
                    },
                    {
                        "nickname": "Kim",
                        "givenName": "Kim",
                        "familyName": "Pine",
                        "bio": "Drums! Dont irritate me...",
                        "avatar": "photo3.jpg",
                        "@controls": {
                            "self": {
                                "href": "/critique/api/users/Kim/"
                            },
                            "profile": {
                                "href": "/critique/profiles/user-profile/"
                            }
                        }
                    }
                ],
                "@namespaces": {
                    "critique": {
                        "name": "/critique/link-relations/"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/forum/api/users/"
                    },
                    "critique:add-user": {
                        "href": "/forum/api/users/",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "nickname": {
                                    "title": "Nickname",
                                    "description": "User nickname",
                                    "type": "string"
                                },
                                "givenName": {
                                    "title": "Given name",
                                    "description": "User given name",
                                    "type": "string"
                                },
                                "email": {
                                    "title": "Email",
                                    "description": "User email",
                                    "type": "string"
                                },
                                "bio": {
                                    "title": "bio",
                                    "description": "User bio",
                                    "type": "string"
                                },
                                "avatar": {
                                    "title": "avatar",
                                    "description": "User avatar",
                                    "type": "string"
                                },
                                "familyName": {
                                    "title": "familyName",
                                    "description": "User familyName",
                                    "type": "string"
                                },
                                "birthDate": {
                                    "title": "birthDate",
                                    "description": "User birthDate",
                                    "type": "string"
                                },
                                "telephone": {
                                    "title": "telephone",
                                    "description": "User telephone",
                                    "type": "string"
                                },
                                "gender": {
                                    "title": "gender",
                                    "description": "User gender",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "nickname",
                                "givenName",
                                "email"
                            ]
                        }
                    },
                    "critique:all-posts": {
                        "href": "/forum/api/posts/"
                    }
                }
            }

### Create a new user [POST]

Adds a new user to the list of users. Returns the new user URI in the location header.

+ Relation: add-user

+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "nickname": "alkila",
                "givenName": "Sercan",
                "email": "sercan@mail.com"
            }


+ Response 201

    User created successfully.

    + Headers

            Location: URL of the newly created resource.


+ Response 400 (application/vnd.mason+json)

    User info is not well formed or entity body is missing.

    + Body

            {
                "@error": {
                    "@message": "User info is not well formed or entity body is missing."
                },
                "resource_url": "/critique/api/users/"
            }

+ Response 415 (application/vnd.mason+json)

    Format of the input is not json.

    + Body

            {
                "@error": {
                    "@message": "Format of the input is not json."
                },
                "resource_url": "/critique/api/users/"
            }

+ Response 422 (application/vnd.mason+json)

    Nickname, email, or mobile already exist in the users list.

    + Body

            {
                "@error": {
                    "@message": "Nickname, email, or mobile already exist in the users list."
                },
                "resource_url": "/critique/api/users/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/users/"
            }

## User [/critique/api/users/{nickname}/]

Resource has the basic information of a specific user. Bio is where the user should enter information about himself/herself, so it should be text. Email and telephone are unique texts as they will not repeat for other users. Gender, avatar and birthdate are texts.

+ Parameters
    + nickname: `Scott` (string) - The nickname of the user.

### Receive user information [GET]

Extract information of a user.

+ Relation: self

+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    Successful.

    + Body

            {
                "nickname": "Scott",
                "givenName": "Scott",
                "familyName": "Pilgrim",
                "avatar": "photo1.jpg",
                "bio": "Best bass in town. Ramona <3",
                "email": "scott@outlook.com",
                "birthdate": "1998-01-22",
                "telephone": null,
                "gender": "male",
                "@controls": {
                    "self": {
                        "href": "/critique/api/users/Scott/"
                    },
                    "profile": {
                        "href": "/critique/profiles/user-profile/"
                    },
                    "collection": {
                        "href": "/critique/api/users/"
                    },
                    "edit": {
                        "href": "/critique/api/users/Scott/",
                        "title": "Edit this user",
                        "method": "PUT",
                        "encoding": "json",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "givenName": {
                                    "title": "given name",
                                    "description": "user given name",
                                    "type": "string"
                                },
                                "familyName": {
                                    "title": "family name",
                                    "description": "user family name",
                                    "type": "string"
                                },
                                "avatar": {
                                    "title": "avatar",
                                    "description": "user avatar",
                                    "type": "string"
                                },
                                "bio": {
                                    "title": "bio",
                                    "description": "user bio",
                                    "type": "string"
                                },
                                "email": {
                                    "title": "email",
                                    "description": "user email",
                                    "type": "string"
                                },
                                "birthdate": {
                                    "title": "birthdate",
                                    "description": "user birthdate",
                                    "type": "string"
                                },
                                "telephone": {
                                    "title": "telephone",
                                    "description": "user telephone",
                                    "type": "string"
                                },
                                "gender": {
                                    "title": "gender",
                                    "description": "user gender",
                                    "type": "string"
                                }
                            },
                            "required": []
                        }
                    },
                    "critique:delete": {
                        "href": "/critique/api/users/Scott/",
                        "title": "Delete a user",
                        "method": "DELETE"
                    },
                    "critique:user-inbox": {
                        "href": "/critique/api/users/Scott/inbox/"
                    },
                    "critique:user-river": {
                        "href": "/critique/api/users/Scott/river/"
                    },
                    "critique:user-ratings": {
                        "href": "/critique/api/users/Scott/ratings/"
                    }
                },
                "@namespaces": {
                    "critique": {
                        "name": "/critique/link-relations/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }


### Edit user information [PUT]

Modifies mutable attributes of the specified user.

+ Relation: edit

+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "givenName": "Scott",
                "familyName": "Pilgrim",
                "avatar": "photo1.jpg",
                "bio": "Best bass in town. Ramona <3",
                "email": "scott@outlook.com",
                "birthdate": "1998-01-22",
                "telephone": null,
                "gender": "male"
            }

+ Response 204

    User modified successfully.

    + Headers

            Location: URL of the newly edited resource.

+ Response 400 (application/vnd.mason+json)

    User info is not well formed or it is empty.

    + Body

            {
                "@error": {
                    "@message": "User info is not well formed or it is empty."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }

+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }

+ Response 415 (application/vnd.mason+json)

    Format of the input is not json.

    + Body

            {
                "@error": {
                    "@message": "Format of the input is not json."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }

+ Response 422 (application/vnd.mason+json)

    Nickname, email, or mobile already exist in the users list.

    + Body

            {
                "@error": {
                    "@message": "Nickname, email, or mobile already exist in the users list."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }


### Delete a user [DELETE]

Deletes the specified user.

+ Relation: delete

+ Response 204

+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }

## User's river [/critique/api/users/{nickname}/river/]

The river contains the posts sent to users, these posts should be the public ones, after the user has accepted the post sent to him/her. Posts have their ratings and fields indicating whether they were posted anonymously or not.

+ Parameters
    + nickname: `Scott` (string) - The nickname of the user.

### Receive user's river [GET]

Posts sent to the user which are currently public.

+ Relation: user-river

+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "items": [
                    {
                        "sender": "Margaret",
                        "receiver": "Scott",
                        "timestamp": 45345234234,
                        "postId": "p-2",
                        "replyTo": null,
                        "body": "He is a great bass.",
                        "anonymous": false,
                        "public": true,
                        "bestRating": 10,
                        "ratingValue": 8,
                        "@controls": {
                            "self": {
                                "href": "/critique/api/posts/p-2"
                            },
                            "profile": {
                                "href": "/critique/profiles/post-profile/"
                            }
                        }
                    },
                    {
                        "sender": "Kim",
                        "receiver": "Scott",
                        "timestamp": 45345434534,
                        "postId": "p-3",
                        "replyTo": null,
                        "body": "I hate you.",
                        "anonymous": false,
                        "public": true,
                        "bestRating": 10,
                        "ratingValue": 3,
                        "@controls": {
                            "self": {
                                "href": "/critique/api/posts/p-3"
                            },
                            "profile": {
                                "href": "/critique/profiles/post-profile/"
                            }
                        }
                    }
                ],
                "@controls":{
                    "self": {
                        "href": "/critique/api/users/Scott/river"
                    }
                }
            }


+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/{nickname}/river/"
            }

## User's inbox [/critique/api/users/{nickname}/inbox/]

Contains posts sent to the user, it should include text as the actual post, however, rating is optional in the message.

+ Parameters
    + nickname: `Scott` (string) - The nickname of the user.

### Receive user's inbox [GET]

Posts sent to the user which are currently private.

+ Relation user-inbox

+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "items": [
                    {
                        "sender": "Margaret",
                        "receiver": "Scott",
                        "timestamp": 45345234234,
                        "postId": "p-2",
                        "replyTo": null,
                        "body": "He is a great bass.",
                        "anonymous": false,
                        "public": false,
                        "bestRating": 10,
                        "ratingValue": 8,
                        "@controls": {
                            "self": {
                                "href": "/critique/api/posts/p-2"
                            },
                            "profile": {
                                "href": "/critique/profiles/post-profile/"
                            }
                        }
                    },
                    {
                        "sender": "Kim",
                        "receiver": "Scott",
                        "timestamp": 45345434534,
                        "postId": "p-3",
                        "replyTo": null,
                        "body": "I hate you.",
                        "anonymous": false,
                        "public": false,
                        "bestRating": 10,
                        "ratingValue": 3,
                        "@controls": {
                            "self": {
                                "href": "/critique/api/posts/p-3"
                            },
                            "profile": {
                                "href": "/critique/profiles/post-profile/"
                            }
                        }
                    }
                ],
                "@controls":{
                    "self": {
                        "href": "/critique/api/users/Scott/inbox"
                    }
                }
            }


+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/Scott/inbox/"
            }

### Create a new post [POST]

Creates a new post to the list of posts. Returns the post URI.

+ Relation: add-post

+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "sender": "Scott",
                "body": "She is great! (sometimes)",
                "anonymous": false,
                "ratingValue": 8
            }

+ Response 201

    Post created successfully.

    + Headers

            Location: URL of the newly created resource.


+ Response 400 (application/vnd.mason+json)

    Post info is not well formed or entity body is missing.

    + Body

            {
                "@error": {
                    "@message": "Post info is not well formed or entity body is missing."
                },
                "resource_url": "/critique/api/users/Scott/inbox"
            }

+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/{nickname}/posts/"
            }

+ Response 415 (application/vnd.mason+json)

    Format of the input is not json.

    + Body

            {
                "@error": {
                    "@message": "Format of the input is not json."
                },
                "resource_url": "/critique/api/users/Scott/inbox"
            }

+ Response 422 (application/vnd.mason+json)

    Sender or receiver not found.

    + Body

            {
                "@error": {
                    "@message": "Sender not found."
                },
                "resource_url": "/critique/api/users/Scott/inbox"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/users/Scott/inbox"
            }

# Group Posts

All these resources use the [Post Profile](#profiles-post-profile).

In addition all error messages follow the [Error Profile](#profiles-error-profile).

## Posts List [/critique/api/posts/]

Contains the list of posts for a specific user. Extracts all the postsâ€™ summary from the database and creates a new post to the list of posts. It contains the posts sent to users whether public or private posts. Posts have their ratings.


### Posts list [GET]

NOT IMPLEMENTED

+ Response 200 (application/vnd.mason+json)

    + Body

            NOT IMPLEMENTED

## Post [/critique/api/posts/{postId}/]

Contains the information needed from a specific post where it contains the post text, timestamp, sender and receiver nicknames which should not be null value. Post_text is the post content that holds the data needed while rating is an integer of the ratings to the post from others. Should contain postId number. It should also contain replyTo which is the id of the parent post if it is a reply to a post or null if it is the main post.

+ Parameters

    + postId: `p-1` (string) - Post id.

## Receive post's information [GET]

Extracts a post and all itâ€™s information.

+ Request

    + Headers

            Accept: application/vnd.mason+json


+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "sender": "Scott",
                "receiver": "Kim",
                "timestamp": 45345234234,
                "postId": "p-1",
                "replyTo": null,
                "body": "She is great! (sometimes)",
                "anonymous": false,
                "public": true,
                "bestRating": 10,
                "ratingValue": 8,
                "@namespaces": {
                    "critique": {
                        "name": "/critique/link-relations/"
                    }
                },
                "@controls": {
                    "collection": {
                        "href": "/critique/api/posts"
                    },
                    "self": {
                        "href": "/critique/api/posts/p-1"
                    },
                    "profile": {
                        "href": "/critique/profiles/post-profile/"
                    },
                    "edit": {
                        "title": "Edit a post",
                        "href": "/critique/api/posts/p-1",
                        "encoding": "json",
                        "method": "PUT",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "ratingValue": {
                                    "title": "Rating",
                                    "description": "Rating given in the post",
                                    "type": "number"
                                },
                                "body": {
                                    "title": "Body",
                                    "description": "Text of the post",
                                    "type": "number"
                                },
                                "public": {
                                    "title": "Public",
                                    "description": "Publicity of the post",
                                    "type": "boolean"
                                }
                            }
                        },
                        "required": []
                    },
                    "critique:add-reply": {
                        "title": "Add reply",
                        "href": "/critique/api/posts/p-1",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "sender": {
                                    "title": "Sender",
                                    "description": "Nickname of sender of the rating",
                                    "type": "string"
                                },
                                "body": {
                                    "title": "Body",
                                    "description": "Text of the post",
                                    "type": "number"
                                }
                            }
                        },
                        "required": [
                            "sender",
                            "body"
                        ]
                    },
                    "critique:delete": {
                        "href": "/critique/api/posts/p-1",
                        "method": "DELETE"
                    },
                    "critique:sender": {
                        "href": "/critique/api/users/Scott"
                    },
                    "critique:receiver": {
                        "href": "/critique/api/users/Kim"
                    }
                }
            }



+ Response 404 (application/vnd.mason+json)

    Post not found.

    + Body

            {
                "@error": {
                    "@message": "Post not found."
                },
                "resource_url": "/critique/api/posts/{postId}/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/posts/{postId}/"
            }

### Edit post's information [PUT]

Modifies the contents of a specified post.

+ Relation: edit

+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "body": "She is great! (sometimes)",
                "ratingValue": 8,
                "public": true
            }

+ Response 204

    + Headers

            Location: URL of the newly edited resource.

+ Response 400 (application/vnd.mason+json)

    Post info is not well formed or it is empty.

    + Body

            {
                "@error": {
                    "@message": "Post info is not well formed or it is empty."
                },
                "resource_url": "/critique/api/posts/{postId}/"
            }

+ Response 404 (application/vnd.mason+json)

    Post not found.

    + Body

            {
                "@error": {
                    "@message": "Post not found."
                },
                "resource_url": "/critique/api/posts/{postId}/"
            }

+ Response 415 (application/vnd.mason+json)

    Format of the input is not json.

    + Body

            {
                "@error": {
                    "@message": "Format of the input is not json."
                },
                "resource_url": "/critique/api/posts/{postId}/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/posts/{postId}/"
            }

### Delete a post [DELETE]

Deletes the specified post.

+ Relation: delete

+ Response 204

+ Response 404 (application/vnd.mason+json)

    Post not found.

    + Body

            {
                "@error": {
                    "@message": "Post not found."
                },
                "resource_url": "/critique/api/posts/{postId}/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/posts/{postId}/"
            }

### Create a new post as a reply [POST]

Posts a new post as a reply to a given post.

+ Relation: add-reply

+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "sender": "Scott",
                "replyTo": "p-1",
                "body": "It's actually useful",
            }

+ Response 201

    Post created successfully.

    + Headers

            Location: URL of the newly created resource.


+ Response 400 (application/vnd.mason+json)

    Post info is not well formed or entity body is missing.

    + Body

            {
                "@error": {
                    "@message": "Post info is not well formed or entity body is missing."
                },
                "resource_url": "/critique/api/posts/{postId}"
            }


+ Response 404 (application/vnd.mason+json)

    Post not found.

    + Body

            {
                "@error": {
                    "@message": "Post not found."
                },
                "resource_url": "/critique/api/posts/{postId}"
            }

+ Response 415 (application/vnd.mason+json)

    Format of the input is not json.

    + Body

            {
                "@error": {
                    "@message": "Format of the input is not json."
                },
                "resource_url": "/critique/api/posts/{postId}"
            }

+ Response 422 (application/vnd.mason+json)

    Sender not found.

    + Body

            {
                "@error": {
                    "@message": "Sender not found."
                },
                "resource_url": "/critique/api/posts/{postId}"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/posts/{postId}"
            }

# Group Ratings

All these resources use the [Rating Profile](#profiles-rating-profile).

In addition all error messages follow the [Error Profile](#profiles-error-profile).

## User's ratings [/critique/api/users/{nickname}/ratings/]

Contains the ratings list with ratings from all other users to this specific user. It should have a track of the ratings made by users to each other including the person who made the rating and that who received it. Also, it contains the rating id to keep track of the ratings.

+ Parameters
    + nickname: `Scott` (string) - The nickname of the user.


### Receive users ratings [GET]

Extracts the ratings given to the user.

+ Relation: user-ratings

+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "items": [
                    {
                        "ratingId": "rtg-015",
                        "bestRating": 10,
                        "ratingValue": 8,
                        "sender": "Scott",
                        "receiver": "Kim",
                        "@controls": {
                            "self": {
                                "href": "/critique/api/ratings/rtg-015/"
                            },
                            "profile": {
                                "href": "/critique/profiles/rating-profile/"
                            },
                            "critique:sender": {
                                "href": "/critique/api/users/Scott"
                            },
                            "critique:receiver": {
                                "href": "/critique/api/users/Kim"
                            }
                        }
                    },
                    {
                        "ratingId": "rtg-016",
                        "bestRating": 10,
                        "ratingValue": 4,
                        "sender": "Kim",
                        "receiver": "Scott",
                        "@controls": {
                            "self": {
                                "href": "/critique/api/ratings/rtg-016/"
                            },
                            "profile": {
                                "href": "/critique/profiles/rating-profile/"
                            },
                            "critique:sender": {
                                "href": "/critique/api/users/Kim"
                            },
                            "critique:receiver": {
                                "href": "/critique/api/users/Scott"
                            }
                        }
                    }
                ],
                "@namespaces": {
                    "critique": {
                        "name": "/critique/link-relations/"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/critique/api/users/Kim/ratings/"
                    },
                    "critique:add-rating": {
                        "href": "/critique/api/users/Kim/ratings/",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "ratingValue": {
                                    "title": "Rating",
                                    "description": "Rating for the user",
                                    "type": "number"
                                },
                                "sender": {
                                    "title": "Sender",
                                    "description": "Nickname of sender of the rating",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ratingValue",
                                "sender"
                            ]
                        }
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/{nickname}/ratings/"
            }

### Create a new rating [POST]

Appends a new rating to the list of ratings.

+ Relation: add-rating

+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "ratingValue": 8,
                "sender": "Scott"
            }


+ Response 201

    Rating created successfully.

    + Headers

            Location: URL of the newly created resource.


+ Response 400 (application/vnd.mason+json)

    Rating info is not well formed or entity body is missing.

    + Body

            {
                "@error": {
                    "@message": "Rating info is not well formed or entity body is missing."
                },
                "resource_url": "/critique/api/users/Kim/ratings/"
            }

+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/Kim/ratings/"
            }

+ Response 415 (application/vnd.mason+json)

    Format of the input is not json.

    + Body

            {
                "@error": {
                    "@message": "Format of the input is not json."
                },
                "resource_url": "/critique/api/users/Kim/ratings/"
            }

+ Response 422 (application/vnd.mason+json)

    Sender or receiver not found.

    + Body

            {
                "@error": {
                    "@message": "Sender not found."
                },
                "resource_url": "/critique/api/users/Kim/ratings/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/users/Kim/ratings/"
            }

## Rating [/critique/api/users/{nickname}/ratings/{ratingId}/]

Contains a specific rating to this specific user. It is in integer  indicating the number for rating to the user. Can be modified after stating it.

+ Parameters
    + nickname: `Scott` (string) - The nickname of the user.
    + ratingId: `rtg-015` (string) - Rating id.

### Receive rating's information [GET]

Extracts a rating from the database.

+ Request

    + Headers

            Accept: application/vnd.mason+json


+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "ratingId": "rtg-015",
                "bestRating": 10,
                "ratingValue": 8,
                "sender": "Scott",
                "receiver": "Kim",
                "@namespaces": {
                    "critique": {
                        "name": "/critique/link-relations/"
                    },
                    "@controls": {
                        "self": {
                            "href": "/critique/api/ratings/rtg-015"
                        },
                        "profile": {
                            "href": "/critique/profiles/rating-profile/"
                        },
                        "edit": {
                            "title": "Edit Rating",
                            "href": "/critique/api/ratings/rtg-015",
                            "encoding": "json",
                            "method": "PUT",
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ratingValue": {
                                        "title": "Rating",
                                        "description": "Given rating to the user",
                                        "type": "number"
                                    }
                                }
                            },
                            "required": [ ]
                        },
                        "critique:delete": {
                            "href": "/critique/api/ratings/rtg-015",
                            "method": "DELETE"
                        },
                        "critique:sender": {
                            "href": "/critique/api/users/Scott"
                        },
                        "critique:receiver": {
                            "href": "/critique/api/users/Kim"
                        }
                    }
                }
            }


+ Response 404 (application/vnd.mason+json)

    Rating not found.

    + Body

            {
                "@error": {
                    "@message": "Rating not found."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }

### Edit rating's information [PUT]

Modifies a rating.

+ Relation: edit

+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "ratingValue": 9
            }

+ Response 204

    + Headers

            Location: URL of the newly edited resource.

+ Response 400 (application/vnd.mason+json)

    Rating info is not well formed or it is empty.

    + Body

            {
                "@error": {
                    "@message": "Rating info is not well formed or it is empty."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }

+ Response 404 (application/vnd.mason+json)

    Rating not found.

    + Body

            {
                "@error": {
                    "@message": "Rating not found."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }

+ Response 415 (application/vnd.mason+json)

    Format of the input is not json.

    + Body

            {
                "@error": {
                    "@message": "Format of the input is not json."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }


### Delete a rating [DELETE]

Deletes the specified rating.

+ Relation: delete

+ Response 204

+ Response 404 (application/vnd.mason+json)

    Rating not found.

    + Body

            {
                "@error": {
                    "@message": "Rating not found."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }
