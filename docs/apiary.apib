FORMAT: 1A
HOST: http://localhost:5000

# Critique

Critique is a simple API allowing interactions to the platfrom.

# Group Link Relations

This document uses IANA standard link relations (http://www.iana.org/assignments/link-relations/link-relations.xhtml). In addition the following link relations have been defined:

## add-user [/critique/link-relations/add-user]

Creates a new user via `POST`.

### GET

Return the link relation description in HTML format.

+ Response 200 (text/html)

## add-rating [/critique/link-relations/add-rating]

Creates a new rating via `POST`.

### GET

Return the link relation description in HTML format.

+ Response 200 (text/html)

## user-inbox [/critique/link-relations/user-inbox]

Returns the posts sent to the user which are currently not public via `GET`.

### GET

Return the link relation description in HTML format.

+ Response 200 (text/html)

## user-river [/critique/link-relations/user-river]

Returns the posts sent to the user which are currently public via `GET`.

### GET

Return the link relation description in HTML format.

+ Response 200 (text/html)

## user-ratings [/critique/link-relations/ratings]

Returns the ratings sent to the user via `GET`.

### GET

Return the link relation description in HTML format.

+ Response 200 (text/html)

## edit-rating [/critique/link-relations/edit-rating]

Edits the ratings the spesific rating via `PUT`.

### GET

Return the link relation description in HTML format.

+ Response 200 (text/html)

## delete [/critique/link-relations/delete]

Deletes the current context. Use via `DELETE`.

### GET

Return the link relation description in HTML format.

+ Response 200 (text/html)




# Group Profiles

## Error Profile [/critique/profiles/error_profile]

Profile definition for all errors messages in the system.

### Semantic Descriptors

#### Data Type Error

 * `resource_url` (string): URL of the resource generating the error.

### GET

Return the User Profile in HTML format.

+ Response 200 (text/html)

## User Profile [/critique/profiles/user_profile]

Profile definition for all user resources.

### Dependencies

This profile inherits:

 * Some semantic descriptors from [Person](http://schema.org/Person)
 * Some link relations from IANA Web linking [RFC5988](https://www.iana.org//assignmentscritique/link-/relationscritique/link-relations.xhtml)

### Link relations

 * [`add-user`](#add-user)
 * [`delete`](#delete)
 * [`user-inbox`](#user-inbox)
 * [`user-river`](#user-river)
 * [`user-ratings`](#user-ratings)

Inherited from IANA RFC5988:

 * [`collection`](http://tools.ietf.org/html/rfc6573): Only accessible through `GET`.
 * [`edit`](https://tools.ietf.org/html/rfc5023#section-11.1): This link allows editing the user via `PUT`.
 * [`profile`](https://tools.ietf.org/html/rfc6906): The link contains the location of the resource profile.

### Semantic Descriptors

#### Data Type User

 * `nickname` (string): Nickname of the user. Mandatory in representations in which a new user is generated.
 * `avatar` (string): Avatar of the user. Optional in representations in which a new user is generated.
 * `bio` (string): Signiture of the user. Optional in representations in which a new user is generated.

Inherited from [Person](http://schema.org/Person):

 * [`givenName`](http://schema.org/givenName) (string): Mandatory in representations in which a new user is generated.
 * [`familyName`](http://schema.org/familyName) (string): Optional in representations in which a new user is generated.
 * [`email`](http://schema.org/email) (string): Mandatory in representations in which a new user is generated.
 * [`birthDate`](http://schema.org/birthDate) (string): Optional in representations in which a new user is generated.
 * [`telephone`](http://schema.org/telephone) (string): Optional in representations in which a new user is generated.
 * [`gender`](http://schema.org/gender) (string): Optional in representations in which a new user is generated.

### GET

Return the User Profile in HTML format.

+ Response 200 (text/html)


## Rating Profile [/critique/profiles/rating-profile]

Profile definition for all rating resources.

### Dependencies

This profile inherits:

 * Some semantic descriptors from [Person](http://schema.org/Rating)
 * Some link relations from IANA Web linking [RFC5988](https://www.iana.org//assignmentscritique/link-/relationscritique/link-relations.xhtml)

### Link relations

 * [`add-rating`](#add-rating)
 * [`delete`](#delete)

Inherited from IANA RFC5988:

 * [`collection`](http://tools.ietf.org/html/rfc6573): Only accessible through `GET`.
 * [`edit`](https://tools.ietf.org/html/rfc5023#section-11.1): This link allows editing the user via `PUT`.
 * [`profile`](https://tools.ietf.org/html/rfc6906): The link contains the location of the resource profile.

### Semantic Descriptors

#### Data Type Rating

 * `ratingId` (string): Rating id of the rating in `rtg-(\d+)` format. Example `rtg-1`.
 * `sender` (string): Nickname of the sender. Example, `Scott`.
 * `receiver` (string): Nickname of the receiver. Example, `Kim`.

Inherited from [Rating](http://schema.org/Rating):

 * [`bestRating`](http://schema.org/bestRating) (number): For informing the client.
 * [`ratingValue`](http://schema.org/ratingValue) (number): Mandatory in creation of a new rating.

### GET

Return the Rating Profile in HTML format.

+ Response 200 (text/html)



# Group Users

All these resources use the [User Profile](#profiles-user-profile).

In addition all error messages follow the [Error Profile](#profiles-error-profile).

## Users List [/critique/api/users/]

A list of all users in the platform.

### List Users [GET]

Get a list of all users in the platform.

+ Relation: self

+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    List successful retrieved.

    + Body

            {
                "items": [
                    {
                        "givenName": "Scott",
                        "familyName": "Pilgrim",
                        "bio": "Best bass in town. Ramona <3",
                        "avatar": "photo1.jpg",
                        "@controls": {
                            "self": {
                                "href": "/critique/api/users/Scott/"
                            },
                            "profile": {
                                "href": "/critique/profiles/user-profile/"
                            }
                        }
                    },
                    {
                        "givenName": "Kim",
                        "familyName": "Pine",
                        "bio": "Drums! Dont irritate me...",
                        "avatar": "photo3.jpg",
                        "@controls": {
                            "self": {
                                "href": "/critique/api/users/Kim/"
                            },
                            "profile": {
                                "href": "/critique/profiles/user-profile/"
                            }
                        }
                    }
                ],
                "@namespaces": {
                    "critique": {
                        "name": "/critique/link-relations/"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/forum/api/users/"
                    },
                    "critique:add-user": {
                        "href": "/forum/api/users/",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "nickname": {
                                    "title": "Nickname",
                                    "description": "User nickname",
                                    "type": "string"
                                },
                                "givenName": {
                                    "title": "Given name",
                                    "description": "User given name",
                                    "type": "string"
                                },
                                "email": {
                                    "title": "Email",
                                    "description": "User email",
                                    "type": "string"
                                }
                            },
                            "required": ["nickname", "givenName", "email"]
                        }
                    }
                }
            }

### Create a new user [POST]

Create a new user.

+ Relation: add-user

+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "nickname": "alkila",
                "givenName": "Sercan",
                "email": "sercan@mail.com"
            }


+ Response 201

    User created successfully.

    + Headers

            Location: URL of the newly created resource.


+ Response 400 (application/vnd.mason+json)

    User info is not well formed or entity body is missing.

    + Body

            {
                "@error": {
                    "@message": "User info is not well formed or entity body is missing."
                },
                "resource_url": "/critique/api/users/"
            }

+ Response 415 (application/vnd.mason+json)

    Format of the input is not json.

    + Body

            {
                "@error": {
                    "@message": "Format of the input is not json."
                },
                "resource_url": "/critique/api/users/"
            }

+ Response 422 (application/vnd.mason+json)

    Nickname, email, or mobile already exist in the users list.

    + Body

            {
                "@error": {
                    "@message": "Nickname, email, or mobile already exist in the users list."
                },
                "resource_url": "/critique/api/users/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/users/"
            }

## User [/critique/api/users/{nickname}/]

A user stored in the Critique database.

+ Parameters
    + nickname: `Scott` (string) - The nickname of the user.

### Receive user information [GET]

Receives the information of a particular user.

+ Relation: self

+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    Successful.

    + Body

            {
                "givenName": "Scott",
                "familyName": "Pilgrim",
                "avatar": "photo1.jpg",
                "bio": "Best bass in town. Ramona <3",
                "email": "scott@outlook.com",
                "birthdate": "1998-01-22",
                "telephone": null,
                "gender": "male",
                "@namespaces": {
                    "critique": {
                        "name": "/critique/link-relations/"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/critique/api/users/Scott/"
                    },
                    "profile": {
                        "href": "/critique/profiles/user-profile/"
                    },
                    "collection": {
                        "href": "/forum/api/users/"
                    },
                    "edit": {
                        "title": "Edit this user",
                        "href": "/forum/api/users/Scott/",
                        "encoding": "json",
                        "method": "PUT",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "givenName": {
                                    "title": "given name",
                                    "description": "user given name",
                                    "type": "string"
                                },
                                "familyName": {
                                    "title": "family name",
                                    "description": "user family name",
                                    "type": "string"
                                },
                                "avatar": {
                                    "title": "avatar",
                                    "description": "user avatar",
                                    "type": "string"
                                },
                                "bio": {
                                    "title": "bio",
                                    "description": "user bio",
                                    "type": "string"
                                },
                                "email": {
                                    "title": "email",
                                    "description": "user email",
                                    "type": "string"
                                },
                                "birthdate": {
                                    "title": "birthdate",
                                    "description": "user birthdate",
                                    "type": "string"
                                },
                                "telephone": {
                                    "title": "telephone",
                                    "description": "user telephone",
                                    "type": "string"
                                },
                                "gender": {
                                    "title": "gender",
                                    "description": "user gender",
                                    "type": "string"
                                }
                            },
                            "required": [ ]
                        }
                    },
                    "critique:delete": {
                        "href": "/critique/api/users/Scott/",
                        "method": "DELETE"
                    },
                    "critique:user-inbox": {
                        "href": "/critique/api/users/Scott/inbox"
                    },
                    "critique:user-river": {
                        "href": "/critique/api/users/Scott/river"
                    },
                    "critique:user-ratings": {
                        "href": "/critique/api/users/Scott/ratings"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }


### Edit user information [PUT]

Edit the information of a particular user.

+ Relation: edit

+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "givenName": "Scott",
                "familyName": "Pilgrim",
                "avatar": "photo1.jpg",
                "bio": "Best bass in town. Ramona <3",
                "email": "scott@outlook.com",
                "birthdate": "1998-01-22",
                "telephone": null,
                "gender": "male"
            }

+ Response 204 (application/vnd.mason+json)

    User modified successfully.

    + Headers

            Location: URL of the newly edited resource.

+ Response 400 (application/vnd.mason+json)

    User info is not well formed or it is empty.

    + Body

            {
                "@error": {
                    "@message": "User info is not well formed or it is empty."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }

+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }

+ Response 415 (application/vnd.mason+json)

    Format of the input is not json.

    + Body

            {
                "@error": {
                    "@message": "Format of the input is not json."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }

+ Response 422 (application/vnd.mason+json)

    Nickname, email, or mobile already exist in the users list.

    + Body

            {
                "@error": {
                    "@message": "Nickname, email, or mobile already exist in the users list."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }


### Delete a user [DELETE]

Delete a particular user from the platform.

+ Relation: delete

+ Response 204 (application/vnd.mason+json)

    User deleted successfully.

    + Headers


+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/users/{nickname}/"
            }

## User's ratings [/critique/api/users/{nickname}/ratings/]

Ratings given to the user.

+ Parameters
    + nickname: `Scott` (string) - The nickname of the user.


### Receive users ratings [GET]

Extracts the ratings given to the user.

+ Relation: user-ratings

+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "items": [
                    {
                        "ratingId": "rtg-015",
                        "bestRating": 10,
                        "ratingValue": 8,
                        "sender": "Scott",
                        "receiver": "Kim",
                        "@controls": {
                            "self": {
                                "href": "/critique/api/ratings/rtg-015/"
                            },
                            "profile": {
                                "href": "/critique/profiles/rating-profile/"
                            }
                        }
                    },
                    {
                        "ratingId": "rtg-016",
                        "bestRating": 10,
                        "ratingValue": 4,
                        "sender": "Kim",
                        "receiver": "Scott",
                        "@controls": {
                            "self": {
                                "href": "/critique/api/ratings/rtg-016/"
                            },
                            "profile": {
                                "href": "/critique/profiles/rating-profile/"
                            }
                        }
                    }
                ],
                "@namespaces": {
                    "critique": {
                        "name": "/critique/link-relations/"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/forum/api/users/Kim/ratings/"
                    },
                    "critique:add-rating": {
                        "href": "/forum/api/ratings/",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "ratingValue": {
                                    "title": "Rating",
                                    "description": "Rating for the user",
                                    "type": "number"
                                },
                                "sender": {
                                    "title": "Sender",
                                    "description": "Nickname of sender of the rating",
                                    "type": "string"
                                },
                                "receiver": {
                                    "title": "Receiver",
                                    "description": "Nickname of receiver of the rating",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ratingValue",
                                "sender",
                                "receiver"
                            ]
                        }
                    }
                }
            }


+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/{nickname}/ratings/"
            }

## User's river [/critique/api/users/{nickname}/river/]

NOT IMPLEMENTED

+ Parameters
    + nickname: `Scott` (string) - The nickname of the user.

### Receive user's river [GET]

NOT IMPLEMENTED

+ Relation: self

+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    + Body

            {
                NOT IMPLEMENTED
            }

+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/{nickname}/river/"
            }

## User's inbox [/critique/api/users/{nickname}/inbox/]

NOT IMPLEMETED

+ Parameters
    + nickname: `Scott` (string) - The nickname of the user.

### Receive user's inbox [GET]

NOT IMPLEMETED

+ Relation self

+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    + Body

            {
                NOT IMPLEMETED
            }

+ Response 404 (application/vnd.mason+json)

    User not found.

    + Body

            {
                "@error": {
                    "@message": "User not found."
                },
                "resource_url": "/critique/api/users/{nickname}/inbox/"
            }

# Group Posts

All these resources use the [Post Profile](#profiles-post-profile).

In addition all error messages follow the [Error Profile](#profiles-error-profile).

## Posts List [/critique/api/posts/]

A list of all posts in the platform.

### List posts [POST]

Creates a new post to the list of posts and returns the post URI.

+ Relation: self

+ Response 200 (application/vnd.mason+json)

    + Body

            {
            "items":[
                {
                    "sender":"Mina",
                    "receiver": "Sercant",
                    "text": "Hey man, nice work on PWP.",
                    "@controls": {
                        "self": {
                            "href": "/critique/api/posts/"
                        },
                        "profile": {
                            "href": "/critique/profiles/posts-profile/"
                        }
                    }
                },
                {
                    "sender":"Brian",
                    "receiver": "Armadillo",
                    "text": "You have weird working ethics.",
                    "@controls": {
                        "self": {
                            "href": "/critique/api/posts/"
                        },
                        "profile": {
                            "href": "/critique/profiles/posts-profile/"
                        }
                    }
                }
            ],
            "@namespace": {
                "critique": {
                    "name": "/critique/link-relations/"
                }
            }

            }

## POST [/critique/api/posts/{postId}/]

Creates a new post.

### Create a new post [POST]

Extracts a post and all it’s information.

+ Relation: self

+ Request

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "sender": "lisa",
                "receiver": "ibiza",
                "text": "You startup is amazing, keep up the good work."
            }

+ Response 201 (application/vnd.mason+json)

    Successful.

    + Header

            Location: URL of the newly created resource.


+ Response 400 (application/vnd.mason+json)

    + Body

            {
                "@error": {
                    "@message": "Post info is not well formed or entity body is missing."
                },
                "resource_url": "/critique/api/posts/"
            }

+ Response 415 (application/vnd.mason+json)

    + Body

            {
                "@error": {
                    "@message": "Format of the input is not json."
                },
                "resource_url": "/critique/api/posts/"
            }

+ Response 422 (application/vnd.mason+json)

    + Body

            {
                "@error": {
                    "@message": "Sender or receiver not found."
                },
                "resource_url": "/critique/api/posts/"
            }

+ Response 500 (application/vnd.mason+json)

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/posts/"
            }




# Group Ratings

All these resources use the [Post Profile](#profiles-post-profile).

In addition all error messages follow the [Error Profile](#profiles-error-profile).

## Ratings list [/critique/api/ratings/]

View the list that contains users ratings

### List ratings [GET]

NOT IMPLEMENTED

+ Relation: self

+ Request

    + Headers

            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)

    + Headers

            Location: URL of the newly created resource.

    + Body

            { NOT IMPLEMENTED }

+ Response 400 (application/vnd.mason+json)

    + Body

            {
                "@error": {
                    "@message": "Rating info is not well formed or entity body is missing."
                },
                "resource_url": "/critique/api/ratings/"
            }

+ Response 415 (application/vnd.mason+json)

    + Body

            {
                "@error": {
                    "@message": "Format of the input is not json."
                },
                "resource_url": "/critique/api/ratings/"
            }

+ Response 422 (application/vnd.mason+json)

    + Body

            {
                "@error": {
                    "@message": "Sender or receiver not found."
                },
                "resource_url": "/critique/api/ratings/"
            }

+ Response 500 (application/vnd.mason+json)

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/ratings/"
            }

### Create a new rating [POST]

Appends a new rating to the list of ratings.

+ Relation: add-rating

+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "ratingValue": 8,
                "sender": "Scott",
                "receiver": "Kim"
            }


+ Response 201

    Rating created successfully.

    + Headers

            Location: URL of the newly created resource.


+ Response 400 (application/vnd.mason+json)

    Rating info is not well formed or entity body is missing.

    + Body

            {
                "@error": {
                    "@message": "Rating info is not well formed or entity body is missing."
                },
                "resource_url": "/critique/api/ratings/"
            }

+ Response 415 (application/vnd.mason+json)

    Format of the input is not json.

    + Body

            {
                "@error": {
                    "@message": "Format of the input is not json."
                },
                "resource_url": "/critique/api/ratings/"
            }

+ Response 422 (application/vnd.mason+json)

    Sender or receiver not found.

    + Body

            {
                "@error": {
                    "@message": "Sender or receiver not found."
                },
                "resource_url": "/critique/api/ratings/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/ratings/"
            }

## Rating [/critique/api/ratings/{ratingId}/]

View a specific rating information.

+ Parameters

    + ratingId: `rtg-015` (string) - Rating id.

### Receive ratings information [GET]

Extracts a rating from the database.

+ Request

    + Headers

            Accept: application/vnd.mason+json


+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "ratingId": "rtg-015",
                "bestRating": 10,
                "ratingValue": 8,
                "sender": "Scott",
                "receiver": "Kim",
                "@namespaces": {
                    "critique": {
                        "name": "/critique/link-relations/"
                    },
                    "@controls": {
                        "self": {
                            "href": "/critique/api/ratings/rtg-015"
                        },
                        "profile": {
                            "href": "/critique/profiles/rating-profile/"
                        },
                        "edit": {
                            "title": "edit-rating",
                            "href": "/critique/api/ratings/rtg-015",
                            "encoding": "json",
                            "method": "PUT",
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "ratingValue": {
                                        "title": "Rating",
                                        "description": "Given rating to the user",
                                        "type": "number"
                                    }
                                }
                            },
                            "required": [ ]
                        },
                        "critique:delete": {
                            "href": "/critique/api/ratings/rtg-015",
                            "method": "DELETE"
                        }
                    }
                }
            }


+ Response 404 (application/vnd.mason+json)

    Rating not found.

    + Body

            {
                "@error": {
                    "@message": "Rating not found."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }

### Edit rating's information [PUT]

Modifies a rating.

+ Relation: edit

+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json

    + Body

            {
                "ratingValue": 9
            }

+ Response 204 (application/vnd.mason+json)

    + Headers

            Location: URL of the newly edited resource.

+ Response 400 (application/vnd.mason+json)

    Rating info is not well formed or it is empty.

    + Body

            {
                "@error": {
                    "@message": "Rating info is not well formed or it is empty."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }

+ Response 404 (application/vnd.mason+json)

    Rating not found.

    + Body

            {
                "@error": {
                    "@message": "Rating not found."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }

+ Response 415 (application/vnd.mason+json)

    Format of the input is not json.

    + Body

            {
                "@error": {
                    "@message": "Format of the input is not json."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }


### Delete ratings information [DELETE]

Deletes the specified rating.

+ Relation: delete

+ Response 204 (application/vnd.mason+json)

    Rating deleted successfully.

    + Headers

+ Response 404 (application/vnd.mason+json)

    Rating not found.

    + Body

            {
                "@error": {
                    "@message": "Rating not found."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }

+ Response 500 (application/vnd.mason+json)

    The system has failed. Please, contact the administrator.

    + Body

            {
                "@error": {
                    "@message": "The system has failed. Please, contact the administrator."
                },
                "resource_url": "/critique/api/ratings/{ratingId}/"
            }
